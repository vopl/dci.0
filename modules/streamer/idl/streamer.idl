
scope streamer
{
    errc error
    {
        incompatibleProtocol:   "запрошенный удаленной стороной протокол не совместим с уже установленным";
        unsupportedProtocol:    "запрошенный удаленной стороной протокол не поддерживается";
        malformedData:          "бинарный поток испорчен";
        channelClosed:          "канал закрыт";

        unknownIid:             "запрошенный идентификатор интерфейса не опознан";

        tooManyChannels:        "слишком много каналов";
        unknownChannelId:       "запрошенный идентификатор канала не опознан";
    }


    interface Stream
    {
        alias Traffic = bytes;
        in flow:    (Traffic);
    }

    interface Channel: Stream, StreamOpposite
    {
    }

    interface ChannelEndpoint
    {
        in start:           (Channel)       -> ();
        in stop:            ()              -> (Channel);

        out channelFail:    (error);
    }

    interface ChannelHub: ChannelEndpoint
    {
        alias ChannelId = uint32;

        in inject:          (ChannelOpposite)   -> (ChannelId);
        in eject:           (ChannelId)         -> (ChannelOpposite);

        out subchannelFail: (ChannelId, error);
    }

    interface ServiceHub: ChannelEndpoint
    {
        alias ServiceId = uint32;
        alias Local = interface;
        alias Remote = interface;

        in inject:      (Remote)                -> (ServiceId);
        in invite:      (iid)                   -> (Local, ServiceId);
        in eject:       (ServiceId)             -> (Remote);

        out injected:   (Local, ServiceId);
        out invited:    (iid, ServiceId)        -> (Remote);
        out ejected:    (Remote, ServiceId);

        out serviceFail:(ServiceId, error);
    }
}
