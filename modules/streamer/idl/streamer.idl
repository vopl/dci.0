
scope streamer
{
    errc error
    {
        incompatibleProtocol:   "запрошенный удаленной стороной протокол не совместим с уже установленным";
        unsupportedProtocol:    "запрошенный удаленной стороной протокол не поддерживается";
        malformedData:          "бинарный поток испорчен";
        channelClosed:          "канал закрыт";

        unknownIid:             "запрошенный идентификатор интерфейса не опознан";

        tooManyChannels:        "слишком много каналов";
        unknownChannelId:       "запрошенный идентификатор канала не опознан";
    }


    interface Stream
    {
        alias Traffic = bytes;

        enum Subscription
        {
            none;
            continuous;
        }

        in subscribe:   (Subscription);
        out flow:       (Traffic);
    }

    struct Channel
    {
        Stream          _input;
        StreamOpposite  _output;
    }

    interface Endpoint
    {
        in attachChannel:   (Channel)       -> ();
        in detachChannel:   ()              -> (Channel);

        out channelFail:    (error)         -> ();
    }

    interface ChannelHub: Endpoint
    {
        alias SubchannelId = uint32;

        in injectSubchannel:    (Channel)       -> (SubchannelId);
        in ejectSubchannel:     (SubchannelId)  -> (Channel);

        out subchannelFail:     (SubchannelId, error);
    }

    interface ServiceHub: Endpoint
    {
        alias ServiceId = uint32;
        alias Local = interface;
        alias Remote = interface;

        in injectService:   (Remote)                -> (ServiceId);
        in inviteService:   (iid)                   -> (Local, ServiceId);
        in ejectService:    (ServiceId)             -> (Remote);

        out serviceInjected:(Local, ServiceId);
        out serviceInvited: (iid, ServiceId)        -> (Remote);
        out serviceEjected: (Remote, ServiceId);

        out serviceFail:    (ServiceId, error);
    }


    interface Amortisseur : Endpoint
    {
        enum AmortisseurState
        {
            stop;
            run;
            pause;
            fail;
        }

        in startAmortisseur:    (Channel)           -> ();
        in pauseAmortisseur:    ()                  -> ();
        in resumeAmortisseur:   ()                  -> ();
        in migrateAmortisseur:  (Channel)           -> (Channel);
        in stopAmortisseur:     ()                  -> (Channel);

        in amortisseurState:    ()                  -> (AmortisseurState);
        out amortisseurState:   (AmortisseurState)  -> ();
        out amortisseurFail:    (error)             -> ();
    }

}
