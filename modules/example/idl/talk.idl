


scope talk
{

    //клиентское подключение
    interface Peer
    {
        alias Id = array<int8, 32>;

        enum Status
        {
            available;
            busy;
        }
        
        out setId: (Id id);
        out setStatus: (Status status);
        
        out joinChat: (Chat chat) -> bool;
    }
    
    
    
    interface Chat
    {
        out setMembers: (list<Peer::Id> ids);

        out addMember: (Peer::Id id);
        out delMember: (Peer::Id id);
        
        out exhibitVoice: (VoiceTrain voice);
        out exhibitVideo: (VideoTrain video);
        out getFiles: (FilesInfo::Id id) -> FilesReceiver ;

        out typing: (bool v);
        out message: (Message msg);
        in  wantMessageReply: (Message::Id from, Message::Id to);

    }
    
    
    
    
    
    
    
    
    
    
    
    
    struct FilesInfo
    {
        alias Id=int64;
        Id id;
        
        list<string> topNamesPreview;
        uint64 filesAmount;
        uint64 directoriesAmount;
        uint64 totalFilesVolume;

        interface StubInFilesInfo {}
    }

    struct MediaInfo
        : FilesInfo
    {
        string mimeType;
        list<int8> preview;
    }

    struct Message
    {
        alias Id=int64;
        variant Data
        {
            string text;
            FilesInfo files;
            MediaInfo media;
        }
        
        
        Id id;
        list<Data> data;
    }
    
    
    
    interface FilesReceiver
    {
        in abort: ();
        out abort: ();//тут одинаковое имя
        
        struct Entry
        {
            variant SizeOrVoid
            {
                uint64 size;
                bool void_;
            }

            string name;
            SizeOrVoid sizeOrVoid;
        }
        
        in list: (list<FilesReceiver::Entry> entries);
        in content: (list<int8> bytes);

        in finish: ();
    }
    
    interface VoiceTrain
    {
    }

    interface VideoTrain
    {
    }
}
